{"result":"ERROR","domain":"мон.","id":15766062,"time":1485317971,"dnscheckversion":"1.6.2","tree":[{"type":0,"class":"ok","caption":"Delegation","subtree":[]},{"type":0,"class":"error","caption":"Nameserver","subtree":[{"type":1,"class":"ok","caption":"Nameserver ns1.idn.mn","subtree":[]},{"type":1,"class":"error","caption":"Nameserver ns2.idn.mn","subtree":[{"type":3,"class":"warn","caption":"Could not find reverse address for 202.170.80.40 (40.80.170.202.in-addr.arpa.).","subtree":[],"description":"PTR record(s) for the address could not be found in the .arpa-zone. (ip6.arpa. for IPv6 addresses and in-addr.arpa. for IPv4)."},{"type":3,"class":"error","caption":"Name server ns2.idn.mn (202.170.80.40) does not answer queries over UDP.","subtree":[],"description":"The name server failed to answer queries sent over UDP.  This is probably due to the name server not correctly set up or due to misconfigured filtering in a firewall."},{"type":3,"class":"error","caption":"Name server ns2.idn.mn (202.170.80.40) does not answer queries over TCP.","subtree":[],"description":"The name server failed to answer queries sent over TCP.  This is probably due to the name server not correctly set up or due to misconfgured filtering in a firewall. It is a rather common misconception that DNS does not need TCP unless they provide zone transfers - perhaps the name server administrator is not aware that TCP usually is a requirement."}]},{"type":1,"class":"error","caption":"Nameserver ns3.idn.mn","subtree":[{"type":3,"class":"warn","caption":"Could not find reverse address for 180.149.98.78 (78.98.149.180.in-addr.arpa.).","subtree":[],"description":"PTR record(s) for the address could not be found in the .arpa-zone. (ip6.arpa. for IPv6 addresses and in-addr.arpa. for IPv4)."},{"type":3,"class":"error","caption":"Name server ns3.idn.mn (180.149.98.78) does not answer queries over UDP.","subtree":[],"description":"The name server failed to answer queries sent over UDP.  This is probably due to the name server not correctly set up or due to misconfigured filtering in a firewall."},{"type":3,"class":"error","caption":"Name server ns3.idn.mn (180.149.98.78) does not answer queries over TCP.","subtree":[],"description":"The name server failed to answer queries sent over TCP.  This is probably due to the name server not correctly set up or due to misconfgured filtering in a firewall. It is a rather common misconception that DNS does not need TCP unless they provide zone transfers - perhaps the name server administrator is not aware that TCP usually is a requirement."}]}]},{"type":0,"class":"ok","caption":"Consistency","subtree":[]},{"type":0,"class":"ok","caption":"SOA","subtree":[]},{"type":0,"class":"off","caption":"Connectivity","subtree":[]},{"type":0,"class":"ok","caption":"DNSSEC","subtree":[]}],"list":[{"type":0,"class":"","caption":"Delegation","subtree":[{"type":2,"class":"","caption":"Begin testing delegation for мон..","subtree":[]},{"type":2,"class":"","caption":"Name servers listed at parent: ns1.idn.mn,ns2.idn.mn,ns3.idn.mn","subtree":[],"description":"This is the list of name servers that are listed at the parent. It should include all name servers listed at the child."},{"type":2,"class":"","caption":"Name servers listed at child: ns1.idn.mn,ns2.idn.mn,ns3.idn.mn","subtree":[],"description":"This is the list of name servers that are listed at the child. It must include all name servers listed at the parent."},{"type":2,"class":"notice","caption":"No IPv6 name servers found.","subtree":[]},{"type":2,"class":"","caption":"It is possible to build a referral packet for мон. that works without EDNS0.","subtree":[]},{"type":2,"class":"","caption":"Previously used name servers for мон.: ","subtree":[]},{"type":2,"class":"","caption":"Done testing delegation for мон..","subtree":[]}]},{"type":0,"class":"","caption":"Nameserver","subtree":[{"type":1,"class":"","caption":"Nameserver ns1.idn.mn","subtree":[{"type":3,"class":"","caption":"Begin testing name server ns1.idn.mn.","subtree":[]},{"type":3,"class":"","caption":"Begin testing host ns1.idn.mn.","subtree":[]},{"type":3,"class":"","caption":"Begin testing address 218.100.84.27.","subtree":[]},{"type":3,"class":"","caption":"Done testing address 218.100.84.27.","subtree":[]},{"type":3,"class":"","caption":"Done testing host ns1.idn.mn.","subtree":[]},{"type":3,"class":"","caption":"Name server ns1.idn.mn (218.100.84.27) answers queries over UDP.","subtree":[]},{"type":3,"class":"","caption":"Name server ns1.idn.mn (218.100.84.27) answers queries over TCP.","subtree":[]},{"type":3,"class":"","caption":"Name server ns1.idn.mn (218.100.84.27) is not recursive.","subtree":[]},{"type":3,"class":"","caption":"Name server ns1.idn.mn (218.100.84.27) authoritative for мон..","subtree":[]},{"type":3,"class":"","caption":"Done testing name server ns1.idn.mn.","subtree":[]}]},{"type":1,"class":"","caption":"Nameserver ns2.idn.mn","subtree":[{"type":3,"class":"","caption":"Begin testing name server ns2.idn.mn.","subtree":[]},{"type":3,"class":"","caption":"Begin testing host ns2.idn.mn.","subtree":[]},{"type":3,"class":"","caption":"Begin testing address 202.170.80.40.","subtree":[]},{"type":3,"class":"warn","caption":"Could not find reverse address for 202.170.80.40 (40.80.170.202.in-addr.arpa.).","subtree":[],"description":"PTR record(s) for the address could not be found in the .arpa-zone. (ip6.arpa. for IPv6 addresses and in-addr.arpa. for IPv4)."},{"type":3,"class":"","caption":"Done testing address 202.170.80.40.","subtree":[]},{"type":3,"class":"","caption":"Done testing host ns2.idn.mn.","subtree":[]},{"type":3,"class":"error","caption":"Name server ns2.idn.mn (202.170.80.40) does not answer queries over UDP.","subtree":[],"description":"The name server failed to answer queries sent over UDP.  This is probably due to the name server not correctly set up or due to misconfigured filtering in a firewall."},{"type":3,"class":"error","caption":"Name server ns2.idn.mn (202.170.80.40) does not answer queries over TCP.","subtree":[],"description":"The name server failed to answer queries sent over TCP.  This is probably due to the name server not correctly set up or due to misconfgured filtering in a firewall. It is a rather common misconception that DNS does not need TCP unless they provide zone transfers - perhaps the name server administrator is not aware that TCP usually is a requirement."},{"type":3,"class":"","caption":"Done testing name server ns2.idn.mn.","subtree":[]}]},{"type":1,"class":"","caption":"Nameserver ns3.idn.mn","subtree":[{"type":3,"class":"","caption":"Begin testing name server ns3.idn.mn.","subtree":[]},{"type":3,"class":"","caption":"Begin testing host ns3.idn.mn.","subtree":[]},{"type":3,"class":"","caption":"Begin testing address 180.149.98.78.","subtree":[]},{"type":3,"class":"warn","caption":"Could not find reverse address for 180.149.98.78 (78.98.149.180.in-addr.arpa.).","subtree":[],"description":"PTR record(s) for the address could not be found in the .arpa-zone. (ip6.arpa. for IPv6 addresses and in-addr.arpa. for IPv4)."},{"type":3,"class":"","caption":"Done testing address 180.149.98.78.","subtree":[]},{"type":3,"class":"","caption":"Done testing host ns3.idn.mn.","subtree":[]},{"type":3,"class":"error","caption":"Name server ns3.idn.mn (180.149.98.78) does not answer queries over UDP.","subtree":[],"description":"The name server failed to answer queries sent over UDP.  This is probably due to the name server not correctly set up or due to misconfigured filtering in a firewall."},{"type":3,"class":"error","caption":"Name server ns3.idn.mn (180.149.98.78) does not answer queries over TCP.","subtree":[],"description":"The name server failed to answer queries sent over TCP.  This is probably due to the name server not correctly set up or due to misconfgured filtering in a firewall. It is a rather common misconception that DNS does not need TCP unless they provide zone transfers - perhaps the name server administrator is not aware that TCP usually is a requirement."},{"type":3,"class":"","caption":"Done testing name server ns3.idn.mn.","subtree":[]}]}]},{"type":0,"class":"","caption":"Consistency","subtree":[{"type":2,"class":"","caption":"Begin testing zone consistency for мон..","subtree":[]},{"type":2,"class":"","caption":"SOA at address 218.100.84.27 has serial 2014060412.","subtree":[]},{"type":2,"class":"","caption":"All SOA records have consistent serial numbers.","subtree":[]},{"type":2,"class":"","caption":"All other fields in the SOA record are consistent among all name servers.","subtree":[]},{"type":2,"class":"notice","caption":"The listed nameservers for мон. all report the same set of nameservers.","subtree":[]},{"type":2,"class":"","caption":"Done testing zone consistency for мон..","subtree":[]}]},{"type":0,"class":"","caption":"SOA","subtree":[{"type":2,"class":"","caption":"Begin testing SOA parameters for мон..","subtree":[]},{"type":2,"class":"","caption":"Found SOA record for мон..","subtree":[]},{"type":2,"class":"","caption":"Begin testing host ns1.idn.mn.","subtree":[]},{"type":2,"class":"","caption":"Begin testing address 218.100.84.27.","subtree":[]},{"type":2,"class":"","caption":"Done testing address 218.100.84.27.","subtree":[]},{"type":2,"class":"","caption":"Done testing host ns1.idn.mn.","subtree":[]},{"type":2,"class":"","caption":"SOA MNAME for мон. valid (ns1.idn.mn).","subtree":[]},{"type":2,"class":"","caption":"SOA MNAME for мон. (ns1.idn.mn) listed as NS.","subtree":[],"description":"The name server listed as the SOA MNAME is listed as a name server."},{"type":2,"class":"","caption":"SOA MNAME for мон. (ns1.idn.mn) is authoritative.","subtree":[]},{"type":2,"class":"","caption":"Successful attempt to deliver email for SOA RNAME of мон. (tech.datacom.mn) using tech@datacom.mn.","subtree":[]},{"type":2,"class":"notice","caption":"SOA TTL for мон. too small (1500) - recommended >= 3600.","subtree":[],"description":"The smaller the SOA TTL value, the more often resolvers need to requery for SOA record."},{"type":2,"class":"","caption":"SOA refresh for мон. OK (43200) - recommended >= 14400.","subtree":[]},{"type":2,"class":"","caption":"SOA retry for мон. OK (7200) - recommended >= 3600.","subtree":[]},{"type":2,"class":"","caption":"SOA expire for мон. OK (1209600) - recommended >= 604800.","subtree":[]},{"type":2,"class":"","caption":"SOA minimum for мон. OK (3600) - recommended between 300 and 86400.","subtree":[]},{"type":2,"class":"","caption":"Done testing SOA parameters for мон..","subtree":[]}]},{"type":0,"class":"","caption":"Connectivity","subtree":[]},{"type":0,"class":"","caption":"DNSSEC","subtree":[{"type":2,"class":"","caption":"Begin testing DNSSEC for мон..","subtree":[]},{"type":2,"class":"","caption":"Found DS record for мон. at parent.","subtree":[],"description":"A DS (delegation signer) RRset was found at the parent.  This indicates a secure delegation, i.e. the child must be signed."},{"type":2,"class":"notice","caption":"DNS lookup error (connection failed).","subtree":[]},{"type":2,"class":"notice","caption":"DNS lookup error (connection failed).","subtree":[]},{"type":2,"class":"","caption":"Nameserver 218.100.84.27 does DNSSEC extra processing.","subtree":[]},{"type":2,"class":"","caption":"Servers for мон. have consistent extra processing status.","subtree":[]},{"type":2,"class":"","caption":"Authenticated denial records found for мон., of type NSEC.","subtree":[]},{"type":2,"class":"","caption":"Found DNSKEY record for мон. at child.","subtree":[],"description":"A DNSKEY RRset was found at the child, indicating that the child probably uses DNSSEC."},{"type":2,"class":"","caption":"Consistent security for мон..","subtree":[]},{"type":2,"class":"","caption":"Checking DNSSEC at child (мон.).","subtree":[]},{"type":2,"class":"","caption":"мон.'s key with tag 45112 uses algorithm number 5 (RSA/SHA-1).","subtree":[]},{"type":2,"class":"","caption":"Algorithm number 5 is OK.","subtree":[]},{"type":2,"class":"","caption":"DNSKEY мон. (tag 45112) is marked as a secure entry point (SEP).","subtree":[],"description":"A secure entry point (SEP) is used as part of the chain of trust from the parent to the child."},{"type":2,"class":"","caption":"мон.'s key with tag 24771 uses algorithm number 5 (RSA/SHA-1).","subtree":[]},{"type":2,"class":"","caption":"Algorithm number 5 is OK.","subtree":[]},{"type":2,"class":"","caption":"DNSSEC signature expires at: Fri Feb 24 03:00:03 2017","subtree":[]},{"type":2,"class":"","caption":"Duration for RRSIG(xn--l1acc/IN/DNSKEY/24771) is OK (2592000 seconds).","subtree":[]},{"type":2,"class":"","caption":"DNSSEC signature RRSIG(xn--l1acc/IN/DNSKEY/24771) matches records.","subtree":[]},{"type":2,"class":"","caption":"DNSSEC signature valid: RRSIG(xn--l1acc/IN/DNSKEY/24771)","subtree":[]},{"type":2,"class":"","caption":"DNSSEC signature expires at: Fri Feb 24 03:00:03 2017","subtree":[]},{"type":2,"class":"","caption":"Duration for RRSIG(xn--l1acc/IN/DNSKEY/45112) is OK (2592000 seconds).","subtree":[]},{"type":2,"class":"","caption":"DNSSEC signature RRSIG(xn--l1acc/IN/DNSKEY/45112) matches records.","subtree":[]},{"type":2,"class":"","caption":"DNSSEC signature valid: RRSIG(xn--l1acc/IN/DNSKEY/45112)","subtree":[]},{"type":2,"class":"","caption":"Enough valid signatures found for мон..","subtree":[]},{"type":2,"class":"","caption":"DNSSEC signature expires at: Fri Feb 24 03:00:03 2017","subtree":[]},{"type":2,"class":"","caption":"Duration for RRSIG(xn--l1acc/IN/SOA/24771) is OK (2592000 seconds).","subtree":[]},{"type":2,"class":"","caption":"DNSSEC signature RRSIG(xn--l1acc/IN/SOA/24771) matches records.","subtree":[]},{"type":2,"class":"","caption":"DNSSEC signature valid: RRSIG(xn--l1acc/IN/SOA/24771)","subtree":[]},{"type":2,"class":"","caption":"Enough valid signatures over SOA RRset found for мон..","subtree":[]},{"type":2,"class":"","caption":"DNSSEC child checks for мон. complete.","subtree":[]},{"type":2,"class":"","caption":"Checking DNSSEC at parent of мон..","subtree":[]},{"type":2,"class":"","caption":"мон.'s key with tag 45112 uses algorithm number 5 (RSA/SHA-1).","subtree":[]},{"type":2,"class":"","caption":"Algorithm number 5 is OK.","subtree":[]},{"type":2,"class":"","caption":"Parent DS(xn--l1acc./5/1/45112) refers to valid key at child: DNSKEY(xn--l1acc./5/45112)","subtree":[]},{"type":2,"class":"","caption":"Parent DS(мон.) refers to secure entry point (SEP) at child: DS(xn--l1acc./5/1/45112)","subtree":[]},{"type":2,"class":"","caption":"мон.'s key with tag 45112 uses algorithm number 5 (RSA/SHA-1).","subtree":[]},{"type":2,"class":"","caption":"Algorithm number 5 is OK.","subtree":[]},{"type":2,"class":"","caption":"Parent DS(xn--l1acc./5/2/45112) refers to valid key at child: DNSKEY(xn--l1acc./5/45112)","subtree":[]},{"type":2,"class":"","caption":"Parent DS(мон.) refers to secure entry point (SEP) at child: DS(xn--l1acc./5/2/45112)","subtree":[]},{"type":2,"class":"","caption":"DNSSEC parent checks for мон. complete.","subtree":[]},{"type":2,"class":"","caption":"Done testing DNSSEC for мон..","subtree":[]}]}],"sourceData":""}