{"result":"WARNING","domain":"sr.","id":15758124,"time":1485154934,"dnscheckversion":"1.6.2","tree":[{"type":0,"class":"ok","caption":"Delegation","subtree":[]},{"type":0,"class":"ok","caption":"Nameserver","subtree":[{"type":1,"class":"ok","caption":"Nameserver ns1.sr.net","subtree":[]},{"type":1,"class":"ok","caption":"Nameserver ns2.sr.net","subtree":[]}]},{"type":0,"class":"ok","caption":"Consistency","subtree":[]},{"type":0,"class":"warn","caption":"SOA","subtree":[{"type":2,"class":"warn","caption":"Could not find reverse address for 190.98.0.254 (254.0.98.190.in-addr.arpa.).","subtree":[],"description":"PTR record(s) for the address could not be found in the .arpa-zone. (ip6.arpa. for IPv6 addresses and in-addr.arpa. for IPv4)."}]},{"type":0,"class":"off","caption":"Connectivity","subtree":[]},{"type":0,"class":"off","caption":"DNSSEC","subtree":[]}],"list":[{"type":0,"class":"","caption":"Delegation","subtree":[{"type":2,"class":"","caption":"Begin testing delegation for sr..","subtree":[]},{"type":2,"class":"","caption":"Name servers listed at parent: ns1.sr.net,ns2.sr.net","subtree":[],"description":"This is the list of name servers that are listed at the parent. It should include all name servers listed at the child."},{"type":2,"class":"","caption":"Name servers listed at child: ns1.sr.net,ns2.sr.net","subtree":[],"description":"This is the list of name servers that are listed at the child. It must include all name servers listed at the parent."},{"type":2,"class":"notice","caption":"No IPv6 name servers found.","subtree":[]},{"type":2,"class":"","caption":"It is possible to build a referral packet for sr. that works without EDNS0.","subtree":[]},{"type":2,"class":"","caption":"Previously used name servers for sr.: ","subtree":[]},{"type":2,"class":"","caption":"Done testing delegation for sr..","subtree":[]}]},{"type":0,"class":"","caption":"Nameserver","subtree":[{"type":1,"class":"","caption":"Nameserver ns1.sr.net","subtree":[{"type":3,"class":"","caption":"Begin testing name server ns1.sr.net.","subtree":[]},{"type":3,"class":"","caption":"Begin testing host ns1.sr.net.","subtree":[]},{"type":3,"class":"","caption":"Begin testing address 200.1.159.148.","subtree":[]},{"type":3,"class":"","caption":"Done testing address 200.1.159.148.","subtree":[]},{"type":3,"class":"","caption":"Done testing host ns1.sr.net.","subtree":[]},{"type":3,"class":"","caption":"Name server ns1.sr.net (200.1.159.148) answers queries over UDP.","subtree":[]},{"type":3,"class":"","caption":"Name server ns1.sr.net (200.1.159.148) answers queries over TCP.","subtree":[]},{"type":3,"class":"","caption":"Name server ns1.sr.net (200.1.159.148) is not recursive.","subtree":[]},{"type":3,"class":"","caption":"Name server ns1.sr.net (200.1.159.148) authoritative for sr..","subtree":[]},{"type":3,"class":"","caption":"Done testing name server ns1.sr.net.","subtree":[]}]},{"type":1,"class":"","caption":"Nameserver ns2.sr.net","subtree":[{"type":3,"class":"","caption":"Begin testing name server ns2.sr.net.","subtree":[]},{"type":3,"class":"","caption":"Begin testing host ns2.sr.net.","subtree":[]},{"type":3,"class":"","caption":"Begin testing address 200.2.162.30.","subtree":[]},{"type":3,"class":"","caption":"Done testing address 200.2.162.30.","subtree":[]},{"type":3,"class":"","caption":"Done testing host ns2.sr.net.","subtree":[]},{"type":3,"class":"","caption":"Name server ns2.sr.net (200.2.162.30) answers queries over UDP.","subtree":[]},{"type":3,"class":"","caption":"Name server ns2.sr.net (200.2.162.30) answers queries over TCP.","subtree":[]},{"type":3,"class":"","caption":"Name server ns2.sr.net (200.2.162.30) is not recursive.","subtree":[]},{"type":3,"class":"","caption":"Name server ns2.sr.net (200.2.162.30) authoritative for sr..","subtree":[]},{"type":3,"class":"","caption":"Done testing name server ns2.sr.net.","subtree":[]}]}]},{"type":0,"class":"","caption":"Consistency","subtree":[{"type":2,"class":"","caption":"Begin testing zone consistency for sr..","subtree":[]},{"type":2,"class":"","caption":"SOA at address 200.2.162.30 has serial 16898.","subtree":[]},{"type":2,"class":"","caption":"SOA at address 200.1.159.148 has serial 16898.","subtree":[]},{"type":2,"class":"","caption":"All SOA records have consistent serial numbers.","subtree":[]},{"type":2,"class":"","caption":"All other fields in the SOA record are consistent among all name servers.","subtree":[]},{"type":2,"class":"notice","caption":"The listed nameservers for sr. all report the same set of nameservers.","subtree":[]},{"type":2,"class":"","caption":"Done testing zone consistency for sr..","subtree":[]}]},{"type":0,"class":"","caption":"SOA","subtree":[{"type":2,"class":"","caption":"Begin testing SOA parameters for sr..","subtree":[]},{"type":2,"class":"","caption":"Found SOA record for sr..","subtree":[]},{"type":2,"class":"","caption":"Begin testing host gm.sr.net.","subtree":[]},{"type":2,"class":"","caption":"Begin testing address 190.98.0.254.","subtree":[]},{"type":2,"class":"warn","caption":"Could not find reverse address for 190.98.0.254 (254.0.98.190.in-addr.arpa.).","subtree":[],"description":"PTR record(s) for the address could not be found in the .arpa-zone. (ip6.arpa. for IPv6 addresses and in-addr.arpa. for IPv4)."},{"type":2,"class":"","caption":"Done testing address 190.98.0.254.","subtree":[]},{"type":2,"class":"","caption":"Done testing host gm.sr.net.","subtree":[]},{"type":2,"class":"","caption":"SOA MNAME for sr. valid (gm.sr.net).","subtree":[]},{"type":2,"class":"notice","caption":"SOA MNAME for sr. (gm.sr.net) not listed as NS.","subtree":[],"description":"The name server listed as the SOA MNAME is not listed as a name server."},{"type":2,"class":"","caption":"SOA MNAME for sr. (gm.sr.net) is authoritative.","subtree":[]},{"type":2,"class":"","caption":"Successful attempt to deliver email for SOA RNAME of sr. (hostmaster.sr.net) using hostmaster@sr.net.","subtree":[]},{"type":2,"class":"","caption":"SOA TTL for sr. OK (28800) - recommended >= 3600.","subtree":[]},{"type":2,"class":"notice","caption":"SOA refresh for sr. too small (10800) - recommended >= 14400.","subtree":[],"description":"SOA refresh decides how often a secondary name server should check the primary name server for zone updates."},{"type":2,"class":"","caption":"SOA retry for sr. OK (3600) - recommended >= 3600.","subtree":[]},{"type":2,"class":"","caption":"SOA expire for sr. OK (2592000) - recommended >= 604800.","subtree":[]},{"type":2,"class":"","caption":"SOA minimum for sr. OK (900) - recommended between 300 and 86400.","subtree":[]},{"type":2,"class":"","caption":"Done testing SOA parameters for sr..","subtree":[]}]},{"type":0,"class":"","caption":"Connectivity","subtree":[]},{"type":0,"class":"","caption":"DNSSEC","subtree":[{"type":2,"class":"","caption":"Begin testing DNSSEC for sr..","subtree":[]},{"type":2,"class":"","caption":"Did not find DS record for sr. at parent.","subtree":[],"description":"A DS (delegation signer) RRset could not be found at the parent.  This indicates an insecure delegation, i.e. the child does not have to be signed."},{"type":2,"class":"","caption":"Servers for sr. have consistent extra processing status.","subtree":[]},{"type":2,"class":"","caption":"Authenticated denial records not found for sr..","subtree":[]},{"type":2,"class":"","caption":"Did not find DNSKEY record for sr. at child.","subtree":[],"description":"A DNSKEY RRset could not be found at the child, indicating that the child probably does not use DNSSEC."},{"type":2,"class":"","caption":"No DNSKEY(s) found at child, other tests skipped.","subtree":[]},{"type":2,"class":"","caption":"Done testing DNSSEC for sr..","subtree":[]}]}],"sourceData":""}